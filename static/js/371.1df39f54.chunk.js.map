{"version":3,"file":"static/js/371.1df39f54.chunk.js","mappings":"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","sources":["redux/selectors.js","components/WordsListItem/WordsListItem.jsx","components/WordsList/WordsList.jsx","components/AddWordsForm/AddWordsForm.jsx","components/Modal/Modal.jsx","pages/Home.jsx"],"sourcesContent":["export const selectWords = state => state.words;\n// export const getFilterValue = state => state.filter;","import { Button, FormControlLabel, Checkbox } from '@mui/material';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteWord, editWord } from 'redux/wordsSlice';\n\nexport const WordsListItem = ({\n  word: { wordUk, wordEn, checked, id },\n  \n  idx,\n}) => {\n  const [isEdit, setIsEdit] = useState(false);\n  const [ukOption, setUkOption] = useState(wordUk);\n  const [enOption, setEnOption] = useState(wordEn);\n  const dispatch = useDispatch();\n\n  const handleDeleteWord = () => {\n    dispatch(deleteWord(id));\n  };\n\n  const handleEditWord = () => {\n    if (isEdit) {\n      dispatch(editWord({ id, wordUk: ukOption, wordEn: enOption, checked }));\n      setIsEdit(false);\n      return;\n    }\n    setIsEdit(true);\n  };\n\n  return (\n    <li\n      style={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      }}\n    >\n      <FormControlLabel control={<Checkbox checked={checked} />} />\n      <span>{idx}</span>\n      {isEdit ? (\n        <input\n          type=\"text\"\n          value={ukOption}\n          onChange={e => {\n            setUkOption(e.target.value);\n          }}\n        />\n      ) : (\n        <span>{wordUk}</span>\n      )}\n      {isEdit ? (\n        <input\n          type=\"text\"\n          value={enOption}\n          onChange={e => {\n            setEnOption(e.target.value);\n          }}\n        />\n      ) : (\n        <span>{wordEn}</span>\n      )}\n      <div>\n        <Button onClick={handleEditWord}>{isEdit ? 'Save' : 'Edit'}</Button>\n        <Button onClick={handleDeleteWord}>Delete</Button>\n      </div>\n    </li>\n  );\n};","import { useSelector } from 'react-redux';\nimport { selectWords } from 'redux/selectors';\nimport { WordsListItem } from '../WordsListItem/WordsListItem';\n\nexport const WordsList = () => {\n  const words = useSelector(selectWords);\n  return (\n    <ul style={{}}>\n      {words.map((word, idx) => (\n        <WordsListItem word={word} key={word.id} idx={idx + 1} />\n      ))}\n    </ul>\n  );\n};\n","import { TextField, Button } from '@mui/material';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport { addWord } from 'redux/wordsSlice';\n\nexport const AddWordsForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = e => {\n    e.preventDefault();\n    const wordUk = e.currentTarget.elements.uk.value;\n    const wordEn = e.currentTarget.elements.en.value;\n    dispatch(addWord({id: nanoid(), wordEn, wordUk, checked: false}))\n  }\n  \n  return (\n    \n    <form style={{ padding: '24px', backgroundColor: 'white' }} onSubmit={handleSubmit}>\n      <TextField name='uk' label='Ukrainian word'/>\n      <TextField name='en' label='English word'/>\n      <Button type='submit'>Add word</Button>\n    </form>\n  );\n};\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\n\n const ModalWindow = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n\n const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nconst Modal = ({ children, handleToggleModal}) => {\n\n    const closeOnClickOverlay = e => {\n        if (e.currentTarget === e.target) {\n            handleToggleModal()\n        }\n    }\n\n  \n  useEffect(() => {\n    const onCloseByEscape = event => {\n      if (event.code === 'Escape') {\n        handleToggleModal();\n      }\n    };\n    window.addEventListener('keydown', onCloseByEscape);\n\n    return () => {\n      window.removeEventListener('keydown', onCloseByEscape);\n    };\n  }, [handleToggleModal]);\n\n  return     <Overlay onClick={closeOnClickOverlay}>\n      <ModalWindow>\n        {children}\n      </ModalWindow>\n    </Overlay>\n    \n  \n};\n\nModal.propTypes = {\n  handleToggleModal: PropTypes.func.isRequired,\n  children: PropTypes.element.isRequired\n}\n\nexport default Modal;","import { useState } from 'react';\nimport { Button } from '@mui/material';\nimport { WordsList } from 'components/WordsList/WordsList';\nimport { AddWordsForm } from 'components/AddWordsForm/AddWordsForm';\nimport Modal from 'components/Modal/Modal';\nimport { createPortal } from 'react-dom';\n\nconst modalRef = document.querySelector('#modal-root');\n\nconst Home = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const handleToggleModal = () => {\n        setIsModalOpen(prevState => !prevState)\n    }\n\n  return (\n    <>\n      <div style={{ textAlign: 'center' }}>\n        <h1>home</h1>\n        <Button variant=\"contained\" onClick={handleToggleModal}>\n          Addnewword\n        </Button>\n        <WordsList />\n      </div>\n          {isModalOpen && createPortal(<Modal handleToggleModal={ handleToggleModal}><AddWordsForm/></Modal>, modalRef)  }\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["selectWords","state","words","WordsListItem","word","wordUk","wordEn","checked","id","idx","useState","isEdit","setIsEdit","ukOption","setUkOption","enOption","setEnOption","dispatch","useDispatch","style","display","justifyContent","alignItems","FormControlLabel","control","Checkbox","type","value","onChange","e","target","Button","onClick","editWord","deleteWord","WordsList","useSelector","map","AddWordsForm","padding","backgroundColor","onSubmit","preventDefault","currentTarget","elements","uk","en","addWord","nanoid","TextField","name","label","ModalWindow","styled","Overlay","children","handleToggleModal","useEffect","onCloseByEscape","event","code","window","addEventListener","removeEventListener","modalRef","document","querySelector","isModalOpen","setIsModalOpen","prevState","textAlign","variant","createPortal"],"sourceRoot":""}